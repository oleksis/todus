name: CI

on:
  push:
    tags:
      - 'v*'

jobs:
  test_publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.3'
        architecture: 'x64'
    - name: Cache Poetry
      id: cache-poetry
      uses: actions/cache@v2.1.6
      with:
        path: ~/.poetry
        key: ubuntu-latest-poetry
    - name: Install latest version of Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
    - name: Add Poetry to $PATH
      run: |
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Get Poetry version
      run: poetry --version
    - name: Check pyproject.toml validity
      run: poetry check --no-interaction
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v2.1.6
      with:
        path: ${{github.workspace}}/.venv
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ubuntu-latest-
    - name: Install deps
      if: steps.cache-deps.cache-hit != 'true'
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction
    - name: Check code with black
      run: poetry run black --check .
    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=12 --max-line-length=127 --statistics
    - name: Test with pytest
      run: poetry run pytest -v
    - name: Publish to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_PASSWORD }}
      run: |
        poetry config pypi-token.pypi $PYPI_TOKEN
        poetry publish --build
